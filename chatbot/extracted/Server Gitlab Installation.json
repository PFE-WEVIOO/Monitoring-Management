{
  "filename": "Server Gitlab Installation.pdf",
  "content": "📌 Documentation : Installation et \nConfiguration de GitLab avec Intégration \nGitHub\n🛠️ 1. Installation de GitLab sur Ubuntu 22.04\n✅ Étape 1 : Mettre à jour le système et Configurer le pare-feu\n```bash\nsudo apt update && sudo apt upgrade -y\n```\n```bash\nsudo ufw allow http\n```\n```bash\nsudo ufw allow https\n```\n```bash\nsudo ufw allow OpenSSH\n```\n```bash\nsudo ufw reload\n```\n```bash\nsudo ufw enable\n```\n✅ Étape 2 : Installer les dépendances nécessaires\n```bash\nsudo apt install -y curl openssh-server ca-certificates tzdata perl\n```\n✅ Étape 3 : Ajouter le dépôt GitLab\n```bash\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/scri\n```\npt.deb.sh | sudo bash\n✅ Étape 4 : Installer GitLab\n```bash\nsudo apt install -y gitlab-ce\n```\nSans titre\n1\n\n✅ Étape 5 : Configurer GitLab\nModifier l'URL externe dans le fichier de configuration GitLab :\n```bash\nsudo nano /etc/gitlab/gitlab.rb\n```\nRemplacez la ligne suivante :\nexternal_url 'http://192.168.193.130'\nAppliquer la configuration :\n```bash\nsudo gitlab-ctl reconfigure\n```\n✅ Étape 6 : Vérifier le statut de GitLab et Accéder à l'interface \nWeb\n```bash\nsudo gitlab-ctl status\n```\nhttp://192.168.193.130\n```bash\nsudo cat /etc/gitlab/initial_root_password\n```\n🔐 2. Configuration des Clés SSH\n✅ Étape 1 : Générer une clé SSH (si ce n'est pas déjà fait)\nssh-keygen -t rsa -b 4096 -C \"votre-email@example.com\"\nAppuyez sur Entrée pour accepter le chemin par défaut.\n✅ Étape 2 : Ajouter la clé SSH à l’agent SSH\neval $(ssh-agent -s)\nssh-add ~/.ssh/id_rsa\n✅ Étape 3 : Ajouter la clé SSH à GitLab\nSans titre\n2\n\nAfficher la clé publique :\ncat ~/.ssh/id_rsa.pub\n1. Copiez la clé.\n2. Allez sur GitLab → Profile Settings  → SSH Keys .\n3. Collez la clé et cliquez sur Add Key.\n✅ Étape 4 : Tester la connexion SSH avec GitLab\nssh -T git@192.168.193.130\nVous devriez voir :\nWelcome to GitLab, @votre-utilisateur!\n🔑 3. Configuration des Tokens d’Accès GitLab\n✅ Étape 1 : Générer un Token GitLab\n1. Aller dans GitLab → User Settings  → Access Tokens .\n2. Créer un nouveau token avec ces permissions :\napi\nread_repository\nwrite_repository\n3. Copier le token généré.\n✅ Étape 2 : Tester l'accès API GitLab\nTOKEN_GITLAB=\"glpat_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nGITLAB_URL=\"http://192.168.193.130\"\nSans titre\n3\n\n```bash\ncurl --header \"PRIVATE-TOKEN: $TOKEN_GITLAB\" \"$GITLAB_URL/api/v4/proj\n```\nects\"\n🔗 4. Connexion GitLab avec un Compte GitHub\n✅ Étape 1 : Créer une Application OAuth GitHub\n1. Aller sur GitHub Developer Settings.\n2. Créer une nouvelle application OAuth avec :\nHomepage URL : http://192.168.193.130\nAuthorization callback URL : http://192.168.193.130/users/auth/github/callback\n3. Copier le Client ID et Client Secret générés.\n✅ Étape 2 : Activer GitHub OAuth dans GitLab\nModifier le fichier de configuration GitLab :\n```bash\nsudo nano /etc/gitlab/gitlab.rb\n```\nAjouter ces lignes :\ngitlab_rails['omniauth_enabled'] = true\ngitlab_rails['omniauth_allow_single_sign_on'] = ['github']\ngitlab_rails['omniauth_auto_sign_in_with_provider'] = 'github'\ngitlab_rails['omniauth_providers'] = [\n  {\n    \"name\" => \"github\",\n    \"app_id\" => \"VOTRE_CLIENT_ID\",\n    \"app_secret\" => \"VOTRE_CLIENT_SECRET\",\n    \"args\" => { \"scope\" => \"user:email\" }\n  }\n]\nAppliquer la configuration :\nSans titre\n4\n\n```bash\nsudo gitlab-ctl reconfigure\n```\n📥 5. Importation des Projets GitHub vers GitLab\n✅ Étape 1 : Lister les repositories GitHub\nTOKEN_GITHUB=\"ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```bash\ncurl -H \"Authorization: token $TOKEN_GITHUB\" \\\n```\n     -H \"Accept: application/vnd.github.v3+json\" \\\n     https://api.github.com/user/repos?per_page=100 | jq -r '.[].clone_url'\n✅ Étape 2 : Importer un projet GitHub spécifique dans GitLab\nExemple pour testpipeline  :\nGITHUB_REPO=\"https://github.com/motrabelsi10/testpipeline.git\"\nGITLAB_REPO=\"git@192.168.193.130:motrabelsi10/testpipeline.git\"\ngit clone --mirror \"$GITHUB_REPO\"\ncd testpipeline.git\ngit remote remove origin\ngit remote add origin \"$GITLAB_REPO\"\ngit push --mirror origin\n✅ Étape 3 : Vérifier l'importation sur GitLab\ngit ls-remote git@192.168.193.130:motrabelsi10/testpipeline.git\nSi la sortie est vide, vérifier :\nLes permissions du token GitLab\nL'URL du remote\nLes logs GitLab avec sudo gitlab-ctl tail\n🔄\nSans titre\n5\n\n🔄 6. Configuration Git avec Joget\n1. Aller dans Joget → Settings  → Git Integration\n2. Entrer l'URL du dépôt GitLab :\nhttp://192.168.193.130/motrabelsi10/joget-app.git\n3. Ajouter le nom d'utilisateur GitLab : motrabelsi10\n4. Utiliser le Token GitLab généré précédemment\n5. Cocher les options :\n✅ Always Pull from Remote Server\n✅ Auto Sync DB From Git\n6. Enregistrer la configuration et tester la connexion\n🔄 7. Modifier le Jenkinsfile pour GitLab\nDans le pipeline Jenkins, modifier le Checkout Code  :\nstages {\n    stage('Checkout Code') {\n        steps {\n            script {\n                echo \"📥 Cloning repository: main\"\n            }\n            git branch: 'main', url: 'http://192.168.193.130/motrabelsi10/yoyo.git'\n        }\n    }\n}\n🚀 GitLab est maintenant prêt pour être utilisé avec Joget et Jenkins !\nSans titre\n6\n\n"
}