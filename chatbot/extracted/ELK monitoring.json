{
  "filename": "ELK monitoring.pdf",
  "content": "ELK / EFK \n🚀 Pipeline ELK – Étapes de mise en place\n🟢 Étape 1 : Préparation de l’environnement ELK\n1. Installer Elasticsearch\nMoteur de recherche + stockage des logs\nConfigurer la mémoire, les limites, les ports (9200/9300)\n2. Installer Kibana\nInterface de visualisation\nConnectée à Elasticsearch (port 5601)\n3. Installer Logstash\nCollecte + traitement des logs\nPorts à exposer : 5044 (Filebeat) ou lecture locale de fichiers\n📦 Étape 2 : Log Shipping (🚨 c’est ce que tu viens de faire)\n1. Récupérer les logs depuis les applications distantes\n🐳 Docker logs depuis pipeline-ci  : Joget, MySQL, SonarQube\n📁 Transfert régulier des fichiers .log , .gz  vers la machine monitoring\n2. Centraliser tous les fichiers dans un répertoire commun\nExemple : /home/vagrant/monitoring-data/fichiers-logs/\n⚙️ Étape 3 : Ingestion et parsing des logs avec Logstash\n1. Créer une configuration logstash.conf\ninput  : lire les fichiers de logs\nELK / EFK\n1\n\nfilter  : grok / dissect / date / mutate (selon la structure)\noutput  : envoyer dans Elasticsearch (index personnalisé par app)\n2. Test local de la configuration\n```bash\ndocker logs logstash  pour vérifier qu’il n’y a pas d’erreurs\n```\nUtiliser un fichier à la fois si besoin\n📊 Étape 4 : Indexation et stockage dans Elasticsearch\n1. Créer ou personnaliser des index\nNommer par application ( joget-* , sonarqube-* , etc.)\nGérer les mappings si besoin\n2. Vérifier l’ingestion avec la requête :\n```bash\ncurl -X GET http://localhost:9200/_cat/indices?v\n```\n👀 Étape 5 : Visualisation dans Kibana\n1. Créer un index pattern dans Kibana\nExemple : joget-*\nSélectionner le champ @timestamp  pour le tri\n2. Créer des dashboards personnalisés\nNombre d’erreurs, warning, heatmap, top logs par source, etc.\n✅ 1. Trouver les fichiers de logs dans chaque conteneur\nOn va d’abord « entrer » dans chaque conteneur pour chercher les fichiers de \nlogs à l'intérieur.\n🔍 A. SonarQube\nbash\nCopierModifier\nELK / EFK\n2\n\n```bash\ndocker exec -it sonarqube bash\n```\nPuis, à l’intérieur du conteneur :\nbash\nCopierModifier\nls /opt/sonarqube/logs\nTu y verras des fichiers comme web.log , ce.log , es.log , etc.\nTu peux ensuite faire par exemple :\nbash\nCopierModifier\ncat /opt/sonarqube/logs/web.log | tail -n 20\nPour voir les 20 dernières lignes.\n🔍 B. Joget\nbash\nCopierModifier\n```bash\ndocker exec -it joget bash\n```\nPuis cherche ici :\nbash\nCopierModifier\nls /opt/joget/apache-tomcat/logs\nLes fichiers seront des logs Tomcat comme catalina.out , localhost.log , etc.\nELK / EFK\n3\n\n🔍 C. MySQL\nbash\nCopierModifier\n```bash\ndocker exec -it jogetdb bash\n```\nPuis tente :\nbash\nCopierModifier\nls /var/log/mysql\nOU parfois c’est plutôt dans :\nbash\nCopierModifier\nls /var/lib/mysql\nTu peux faire :\nbash\nCopierModifier\ncat /var/log/mysql/error.log | tail -n 20\nTransférer les logs de VM pipeline-ci  ➜ VM monitoring  \nchaque 5 min\nOn va créer un script bash ou script Python + une tâche cron sur la machine \npipeline-ci  qui :\nSe connecte à monitoring  ( 192.168.56.150 )\nELK / EFK\n4\n\nTransfère tous les logs des conteneurs vers :\n/home/vagrant/monitoring-data/fichiers-logs/\n🔧 Option 1 : Script Bash (simple, efficace)\n📁 Crée un script /home/vagrant/send-logs.sh  sur pipeline-ci  :\nbash\nCopierModifier\n#!/bin/bash\n# Dossier de logs dans chaque conteneur\nLOG_DIRS=(\n  \"/opt/joget/apache-tomcat/logs\"\n  \"/var/log\"\n  \"/opt/sonarqube/logs\"\n)\n# Nom des conteneurs\nCONTAINERS=(\"joget\" \"jogetdb\" \"sonarqube\")\n# Dossier temporaire\nTMP_DIR=\"/tmp/logs_to_send\"\nmkdir -p \"$TMP_DIR\"\n# Récupération des logs de chaque conteneur\nfor i in \"${!CONTAINERS[@]}\"; do\n  container=\"${CONTAINERS[$i]}\"\n  log_path=\"${LOG_DIRS[$i]}\"\n  docker cp \"$container:$log_path\" \"$TMP_DIR/$container\"\ndone\n# Envoi vers monitoring\n```bash\nscp -i /home/vagrant/.ssh/monitoring_key -o StrictHostKeyChecking=no -r \n```\n\"$TMP_DIR\"/* vagrant@192.168.56.150:/home/vagrant/monitoring-data/fichier\ns-logs/\nELK / EFK\n5\n\n# Nettoyage temporaire\nrm -rf \"$TMP_DIR\"\nDonne les permissions d’exécution :\nbash\nCopierModifier\nchmod +x /home/vagrant/send-logs.sh\n⏱️ Configurer le cron (chaque 5 minutes)\nLance :\nbash\nCopierModifier\ncrontab -e\nAjoute la ligne suivante :\nbash\nCopierModifier\n*/5 * * * * /home/vagrant/send-logs.sh >> /home/vagrant/send-logs.log 2>&1\n🧪 Tu peux tester à la main d'abord :\nbash\nCopierModifier\n/home/vagrant/send-logs.sh\nELK / EFK\n6\n\nEnsuite vérifie sur la VM monitoring  :\nbash\nCopierModifier\nls /home/vagrant/monitoring-data/fichiers-logs\nELK / EFK\n7\n\n"
}