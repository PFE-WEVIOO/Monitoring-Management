{
  "filename": "Monitoring Et Alerts.pdf",
  "content": "üìä Surveillance des Ressources et Alerte \nsur le Pool de Connexion MySQL\nüöÄ Objectif\nNous allons mettre en place une surveillance automatique des ressources de \nnotre infrastructure ainsi qu‚Äôun syst√®me d‚Äôalerte par email en cas de surcharge \ndes connexions MySQL.\nüîç Ce que nous allons surveiller :\n1. Les ressources de la VM (CPU, RAM, disque) ‚Üí via Node Exporter.\n2. Les ressources des conteneurs Docker ( jogetapp  et jogetdb ) ‚Üí via cAdvisor.\n3. Le pool de connexion MySQL :\nV√©rifier combien de connexions sont utilis√©es.\nEnvoyer un email d‚Äôalerte si un seuil est d√©pass√©.\nüõ† Configuration et Installation\nNous allons configurer Prometheus + Grafana pour la surveillance et un script \nPython pour envoyer des alertes.\n‚úÖ √âtape 1 : Installation et Configuration des \nConteneurs\nNous allons installer Grafana pour la visualisation et Prometheus pour collecter \nles m√©triques.\nüîπ Installation de Prometheus\nLance la commande suivante :\n```bash\ndocker run -d --name prom -p 9090:9090 prom/prometheus\n```\nSans titre\n1\n\nV√©rification :\nAcc√®de √† Prometheus via ton navigateur :\nhttp://192.168.193.133:9090\nüîπ Installation de Grafana\n```bash\ndocker run -d --name grafana -p 3000:3000 grafana/grafana\n```\nV√©rification :\nAcc√®de √† Grafana via :\nhttp://192.168.193.133:3000\nIdentifiants par d√©faut :\nUtilisateur : admin\nMot de passe : admin  (√† modifier apr√®s connexion)\n‚úÖ √âtape 2 : Surveiller les Ressources de la VM avec \nNode Exporter\nüìå Node Exporter permet de collecter les m√©triques syst√®me comme CPU, RAM, \net disque.\nüîπ Installation de Node Exporter\nLance cette commande sur la VM :\n```bash\ndocker run -d --name node-exporter -p 9100:9100 prom/node-exporter\n```\nüîπ V√©rification\nAcc√®de √† :\nSans titre\n2\n\nhttp://192.168.193.133:9100/metrics\nüîπ Ajouter Node Exporter √† Prometheus\nModifie le fichier prometheus.yml  et ajoute :\nscrape_configs:\n  - job_name: 'node_exporter'\n    static_configs:\n      - targets: ['192.168.193.133:9100']\nPuis, red√©marre Prometheus :\n```bash\ndocker restart prom\n```\n‚úÖ √âtape 3 : Surveiller les Conteneurs Docker avec \ncAdvisor\nüìå cAdvisor collecte des m√©triques d√©taill√©es sur l‚Äôutilisation \nCPU/M√©moire/Disque des conteneurs.\nüîπ Installation de cAdvisor\n```bash\ndocker run -d --name=cadvisor -p 8086:8080 \\\n```\n  --volume=/var/run/docker.sock:/var/run/docker.sock:ro \\\n  --volume=/sys:/sys:ro \\\n  --volume=/var/lib/docker/:/var/lib/docker:ro \\\n  gcr.io/cadvisor/cadvisor\nüîπ V√©rification\nAcc√®de √† :\nhttp://192.168.193.133:8086\nSans titre\n3\n\nüîπ Ajouter cAdvisor √† Prometheus\nAjoute ceci √† prometheus.yml  :\nscrape_configs:\n  - job_name: 'cadvisor'\n    static_configs:\n      - targets: ['192.168.193.133:8086']\nPuis, red√©marre Prometheus :\n```bash\ndocker restart prom\n```\n‚úÖ √âtape 4 : Configurer Grafana pour Voir les \nStatistiques\nüìå Grafana permet d'afficher les donn√©es collect√©es par Prometheus.\n1. Acc√©der √† Grafana :\nhttp://192.168.193.133:3000\n2. Ajouter Prometheus comme source de donn√©es :\nURL : http://prom:9090\nEnregistrer.\n3. Importer un Dashboard :\nAller dans \"Dashboards\" ‚Üí \"Import\".\nID pour Node Exporter : 1860\nID pour cAdvisor : 193\nImporter et observer les m√©triques üéâ.\n‚úÖ √âtape 5 : V√©rifier le Pool de Connexion MySQL\nSans titre\n4\n\nüìå Nous allons surveiller le nombre de connexions actives sur jogetdb .\nüîπ Se connecter √† MySQL\n```bash\ndocker exec -it jogetdb mysql -u root -p\n```\nüîπ V√©rifier le nombre de connexions\nSHOW STATUS WHERE Variable_name = 'Threads_connected';\nSi le nombre d√©passe un seuil critique (ex: 50 connexions), nous enverrons un \nemail.\n‚úÖ √âtape 6 : Automatiser l'Alerte Email\nüìå Nous allons cr√©er un script Python qui :\nV√©rifie le nombre de connexions.\nEnvoie un email si le seuil est d√©pass√©.\nüîπ Cr√©er le script monitor_mysql.py\nnano monitor_mysql.py\nAjoute ce code :\nimport smtplib\nimport pymysql\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n# Configuration MySQL\nMYSQL_HOST = \"192.168.193.128\"  # IP de la VM avec MySQL\nMYSQL_USER = \"joget\"\nMYSQL_PASSWORD = \"joget\"\nMYSQL_DATABASE = \"jwdb\"\nSans titre\n5\n\nMAX_CONN = 50  # Seuil d'alerte\n# Configuration SMTP\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\nEMAIL_SENDER = \"mouhamedtrabelsi.28@gmail.com\"\nEMAIL_PASSWORD = \"qjuj hhes hwgd ryxr\"\nEMAIL_RECEIVER = \"mouhamedtrabelsi.28@gmail.com\"\ndef check_mysql_connections():\n    try:\n        conn = pymysql.connect(host=MYSQL_HOST, user=MYSQL_USER, pass\nword=MYSQL_PASSWORD, database=MYSQL_DATABASE)\n        cursor = conn.cursor()\n        cursor.execute(\"SHOW STATUS WHERE Variable_name = 'Threads_conn\nected';\")\n        result = cursor.fetchone()\n        conn.close()\n        if result:\n            current_connections = int(result[1])\n            print(f\"üîç Connexions MySQL actuelles : {current_connections}\")\n            if current_connections > MAX_CONN:\n                send_email_alert(current_connections)\n            else:\n                print(\"‚úÖ Le nombre de connexions est normal.\")\n    except pymysql.Error as e:\n        print(f\"‚ùå Erreur MySQL : {e}\")\ndef send_email_alert(current_connections):\n    try:\n        subject = \"‚ö†Ô∏è Alerte MySQL : Trop de connexions\"\n        body = f\"Le nombre de connexions MySQL a atteint {current_connection\ns}, d√©passant le seuil de {MAX_CONN}.\"\nSans titre\n6\n\n        msg = MIMEMultipart()\n        msg[\"From\"] = EMAIL_SENDER\n        msg[\"To\"] = EMAIL_RECEIVER\n        msg[\"Subject\"] = subject\n        msg.attach(MIMEText(body, \"plain\"))\n        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        server.starttls()\n        server.login(EMAIL_SENDER, EMAIL_PASSWORD)\n        server.sendmail(EMAIL_SENDER, EMAIL_RECEIVER, msg.as_string())\n        server.quit()\n        print(\"‚úÖ Email d'alerte envoy√© avec succ√®s !\")\n    except Exception as e:\n        print(f\"‚ùå Erreur d'envoi de l'email : {e}\")\nif __name__ == \"__main__\":\n    check_mysql_connections()\n‚úÖ √âtape 7 : Automatiser avec Crontab\ncrontab -e\nAjoute :\n*/5 * * * * /usr/bin/python3 /home/user/monitor_mysql.py\n‚úÖ Le script fonctionne automatiquement !\nüéØ R√©sultat Final\n‚úÖ Surveillance en temps r√©el via Prometheus & Grafana.\nSans titre\n7\n\n‚úÖ Alerte email si MySQL d√©passe 50 connexions.\n‚úÖ Syst√®me enti√®rement automatis√©.\nSans titre\n8\n\n"
}