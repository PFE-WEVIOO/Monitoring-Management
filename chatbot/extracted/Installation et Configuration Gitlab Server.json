{
  "filename": "Installation et Configuration Gitlab Server.pdf",
  "content": "üöÄ INSTALLATION ET \nCONFIGURATION DE GITLAB \nSERVER\nüöÄ 1. Cr√©ation de la Machine Virtuelle GitLab avec \nVagrant\nüì¶ Objectif\nCr√©er une VM Ubuntu 22.04 avec VirtualBox pour h√©berger GitLab Community \nEdition.\nüìÅ Configuration du Vagrantfile\nGITLAB_NODE = { :hostname => \"gitlab-server\", :ip => \"192.168.193.130\" }\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"ubuntu/jammy64\"  # Image de base Ubuntu 22.04\n  config.vm.boot_timeout = 600\n  config.vm.define GITLAB_NODE[:hostname] do |node_config|\n    node_config.vm.hostname = GITLAB_NODE[:hostname]  # Nom de la VM\n    node_config.vm.network \"private_network\", ip: GITLAB_NODE[:ip]  # IP fixe\n    node_config.vm.provider \"virtualbox\" do |vb|\n      vb.name = GITLAB_NODE[:hostname]  # Nom dans VirtualBox\n      vb.memory = 6144  # 6 Go RAM pour GitLab\n      vb.cpus = 3       # 3 CPU\n      vb.gui = false    # Pas besoin d'interface graphique\n    end\n    node_config.vm.provision \"shell\", inline: <<-SHELL\nüöÄ INSTALLATION ET CONFIGURATION DE GITLAB SERVER\n1\n\n      apt update && apt upgrade -y\n      apt install -y curl openssh-server ca-certificates tzdata perl\n    SHELL\n  end\nend\nüß™ Lancer la VM √©tape par √©tape\n# Cr√©er le dossier de travail\nmkdir gitlab-server\ncd gitlab-server\n# Initialiser le fichier Vagrantfile avec le contenu ci-dessus\n# Puis lancer la VM :\nvagrant up\n# Se connecter √† la VM\nvagrant ssh\nüõ†Ô∏è 2. Installation de GitLab CE sur Ubuntu 22.04\nüîß Mise √† jour du syst√®me & configuration du pare-feu\n```bash\nsudo apt update && sudo apt upgrade -y  # Mise √† jour du syst√®me\n```\n```bash\nsudo apt install -y ufw                # Installer UFW (pare-feu)\n```\n```bash\nsudo ufw allow http\n```\n```bash\nsudo ufw allow https\n```\n```bash\nsudo ufw allow OpenSSH\n```\n```bash\nsudo ufw reload\n```\n```bash\nsudo ufw enable\n```\nüîß Installer GitLab CE\nüöÄ INSTALLATION ET CONFIGURATION DE GITLAB SERVER\n2\n\n# Installer les d√©pendances n√©cessaires\n```bash\nsudo apt install -y curl openssh-server ca-certificates tzdata perl\n```\n# Ajouter le d√©p√¥t GitLab\n```bash\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/scri\n```\npt.deb.sh | sudo bash\n# Installer GitLab Community Edition\n```bash\nsudo apt install -y gitlab-ce\n```\nüîß Configurer l‚ÄôURL d‚Äôacc√®s √† GitLab\n```bash\nsudo nano /etc/gitlab/gitlab.rb\n```\n# Modifier la ligne :\nexternal_url 'http://192.168.193.130'\n# Enregistrer avec Ctrl+O, puis quitter avec Ctrl+X\nüîÉ Appliquer la configuration GitLab\n```bash\nsudo gitlab-ctl reconfigure\n```\n```bash\nsudo gitlab-ctl status  # V√©rifier que tous les services sont OK\n```\nüåê Acc√®s via navigateur\nOuvre ton navigateur et va sur : http://192.168.193.130\nIdentifiant : root\nMot de passe initial :\n```bash\nsudo cat /etc/gitlab/initial_root_password\n```\nüîê 3. Cl√©s SSH & Tokens GitLab\nüöÄ INSTALLATION ET CONFIGURATION DE GITLAB SERVER\n3\n\nüîë G√©n√©rer une cl√© SSH sur ta VM ou machine\nssh-keygen -t rsa -b 4096 -C \"ton-email@example.com\"\n# Appuie sur Entr√©e jusqu‚Äô√† la fin pour accepter les chemins par d√©faut\nüîë Ajouter la cl√© SSH √† l‚Äôagent\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_rsa\nüîë Copier la cl√© publique\ncat ~/.ssh/id_rsa.pub\n‚û° Va sur GitLab ‚Üí User Settings ‚Üí SSH Keys ‚Üí Add Key\nüß™ Tester la connexion SSH\nssh -T git@192.168.193.130\nTu devrais voir : Welcome to GitLab, @ton-utilisateur\nüéüÔ∏è Cr√©er un Token d'acc√®s personnel\nDans GitLab ‚Üí User Settings ‚Üí Access Tokens\nNom : Joget-Access\nPermissions : ‚úÖ api , read_repository , write_repository\nClique sur Create token, et copie-le !\nüîó 4. Int√©grer GitHub √† GitLab via OAuth (optionnel)\n1. Sur GitHub : Cr√©er une App OAuth\nDeveloper Settings ‚Üí OAuth Apps ‚Üí New OAuth App\nüöÄ INSTALLATION ET CONFIGURATION DE GITLAB SERVER\n4\n\nHomepage URL : http://192.168.193.130\nCallback URL : http://192.168.193.130/users/auth/github/callback\n2. Sur GitLab : Modifier /etc/gitlab/gitlab.rb\nexternal_url 'http://192.168.193.130'\n# Activer l‚Äôauth GitHub\ngitlab_rails['omniauth_enabled'] = true\ngitlab_rails['omniauth_allow_single_sign_on'] = ['github']\n# gitlab_rails['omniauth_auto_sign_in_with_provider'] = 'github'  # comment√©e \npour afficher l'√©cran de login\ngitlab_rails['omniauth_providers'] = [\n {\n   \"name\" => \"github\",\n   \"app_id\" => \"TON_CLIENT_ID\",\n   \"app_secret\" => \"TON_CLIENT_SECRET\",\n   \"args\" => { \"scope\" => \"user:email\" }\n }\n]\n```bash\nsudo gitlab-ctl reconfigure\n```\n3. D√©sactiver validation manuelle\ngitlab_rails['gitlab_signup_enabled'] = true\nüõ°Ô∏è 5. Renforcer la s√©curit√© de GitLab\nEditer /etc/gitlab/gitlab.rb  pour ajouter :\nüöÄ INSTALLATION ET CONFIGURATION DE GITLAB SERVER\n5\n\n# Protection bruteforce\ngitlab_rails['rack_attack_git_basic_auth'] = {\n  'enabled' => true\n}\n# Politique de mot de passe fort\ngitlab_rails['gitlab_password_length'] = {\n  'minimum' => 12,\n  'maximum' => 128\n}\n```bash\nsudo gitlab-ctl reconfigure\n```\nüßë‚Äçü§ù‚Äçüßë 6. Gestion des utilisateurs et groupes (RBAC)\n1. Cr√©er un groupe melkart\nInterface GitLab ‚Üí Groups ‚Üí New Group\nNom : melkart ‚Üí URL : http://192.168.193.130/groups/melkart\nVisibilit√© : Private ‚Üí Cr√©er\n2. Ajouter des projets/sous-groupes\nmelkart/joget-app\nmelkart/infra-ansible , etc.\n3. Ajouter des membres avec r√¥les\nAller dans : melkart ‚Üí Members\nInvite : motrabelsi10  ‚Üí Choisir r√¥le : Maintainer / Developer\nR√©capitulatif des r√¥les :\nR√¥le\nCapacit√©\nüöÄ INSTALLATION ET CONFIGURATION DE GITLAB SERVER\n6\n\nGuest\nLecture seule\nReporter\nClonage, t√©l√©chargement\nDeveloper\nPush, merge, CI/CD\nMaintainer\nG√®re branches prot√©g√©es, settings, pipelines\nOwner\nG√®re tout (groupes uniquement, pas pour projets individuels)\nüìÇ 7. Int√©grer GitLab avec Joget (Git Integration)\nA. Param√®tres Git dans Joget\nAller dans Settings ‚Üí Git Integration\nChamp Git\nValeur\nRepository URL\nhttp://192.168.193.130/melkat-joget/joget-app.git\nUsername\nmotrabelsi10\nToken (comme password)\nglpat-xxxxxxx...\nAlways Pull\n‚úÖ\nAuto Sync DB from Git\n‚úÖ\nüíæ Clique sur Save ‚Üí puis \"Test Connection\"\nB. Organisation des branches\nBranche\nUtilisation\nmain\nProduction stable\napp_1\nPr√©-production / recette\napp_2\nFeature d‚Äôun dev sp√©cifique\napp_3+\nAutres branches de test ou exp√©rimentations\nC. Exemple de workflow depuis Joget :\ncd C:/Joget-DX8/wflow/app_src/app/app_1\n# Initialisation Git\nüöÄ INSTALLATION ET CONFIGURATION DE GITLAB SERVER\n7\n\ngit init\ngit remote add origin http://192.168.193.130/melkat-joget/joget-app.git\n# Cr√©er une branche recette\ngit checkout -b app_1\n# Ajouter les fichiers\ngit add .\ngit commit -m \"Initial commit Joget app (app_1)\"\n# Pousser la branche vers GitLab\ngit push -u origin app_1\nD. Depuis Joget :\n1. Dans Settings ‚Üí Git Integration  ‚Üí changer Git Branch  ‚Üí app_1\n2. Clique sur \"Pull\"\n3. Travaille sur l‚Äôapplication\n4. Clique sur \"Push\" pour sauvegarder\nüîÅ 8. Bonnes pratiques de collaboration\nChaque d√©veloppeur travaille sur une branche d√©di√©e (ex: app_2 , app_3 )\nLes changements sont int√©gr√©s dans main  via Merge Requests GitLab\n1. T√©l√©charge Vault depuis HashiCorp\nwget https://releases.hashicorp.com/vault/1.14.4/vault_1.14.4_linux_amd64.zip\nüöÄ INSTALLATION ET CONFIGURATION DE GITLAB SERVER\n8\n\n2. D√©zippe le binaire\nunzip vault_1.14.4_linux_amd64.zip\n3. D√©place Vault dans le PATH\n```bash\nsudo mv vault /usr/local/bin/\n```\n4. V√©rifie l‚Äôinstallation\nvault --version\nüöÄ INSTALLATION ET CONFIGURATION DE GITLAB SERVER\n9\n\n"
}